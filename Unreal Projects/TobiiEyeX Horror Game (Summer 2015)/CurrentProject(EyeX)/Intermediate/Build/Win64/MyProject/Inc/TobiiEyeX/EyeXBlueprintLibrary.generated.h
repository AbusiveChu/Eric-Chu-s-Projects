// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

#ifdef TOBIIEYEX_EyeXBlueprintLibrary_generated_h
#error "EyeXBlueprintLibrary.generated.h already included, missing '#pragma once' in EyeXBlueprintLibrary.h"
#endif
#define TOBIIEYEX_EyeXBlueprintLibrary_generated_h

struct FVector;
struct FVector2D;
struct FRotator;
#define UEyeXBlueprintLibrary_EVENTPARMS
#define UEyeXBlueprintLibrary_RPC_WRAPPERS \
 \
 \
	DECLARE_FUNCTION(execSetEmulationMode) \
	{ \
		P_GET_PROPERTY(UByteProperty,Mode); \
		P_FINISH; \
		UEyeXBlueprintLibrary::SetEmulationMode(EEyeXEmulationMode::Type(Mode)); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetEmulationMode) \
	{ \
		P_FINISH; \
		*(TEnumAsByte<EEyeXEmulationMode::Type>*)Result=UEyeXBlueprintLibrary::GetEmulationMode(); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetUserPresence) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Out_UserPresence); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetUserPresence((TEnumAsByte<EEyeXUserPresence::Type>&)(Out_UserPresence)); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetEyeTrackingDeviceStatus) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Out_DeviceStatus); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetEyeTrackingDeviceStatus((TEnumAsByte<EEyeXDeviceStatus::Type>&)(Out_DeviceStatus)); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetDisplaySize) \
	{ \
		P_GET_STRUCT_REF(FVector2D,Out_DisplaySize); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetDisplaySize(Out_DisplaySize,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetScreenBounds) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Out_X); \
		P_GET_PROPERTY_REF(UIntProperty,Out_Y); \
		P_GET_PROPERTY_REF(UIntProperty,Out_Width); \
		P_GET_PROPERTY_REF(UIntProperty,Out_Height); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetScreenBounds(Out_X,Out_Y,Out_Width,Out_Height,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetHeadRotation) \
	{ \
		P_GET_STRUCT_REF(FRotator,Out_Rotation); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetHeadRotation(Out_Rotation,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetEyePosition) \
	{ \
		P_GET_STRUCT_REF(FVector,Out_LeftEye); \
		P_GET_STRUCT_REF(FVector,Out_RightEye); \
		P_GET_UBOOL_REF(Out_bIsLeftEyeValid); \
		P_GET_UBOOL_REF(Out_bIsRightEyeValid); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_TimeStamp); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetEyePosition(Out_LeftEye,Out_RightEye,Out_bIsLeftEyeValid,Out_bIsRightEyeValid,Out_TimeStamp); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetOngoingFixation) \
	{ \
		P_GET_PROPERTY(UByteProperty,Mode); \
		P_GET_STRUCT_REF(FVector2D,Out_GazePoint); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_BeginTimeStamp); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_Duration); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetOngoingFixation(EEyeXFixationDataMode::Type(Mode),Out_GazePoint,Out_BeginTimeStamp,Out_Duration,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetLastFixation) \
	{ \
		P_GET_PROPERTY(UByteProperty,Mode); \
		P_GET_STRUCT_REF(FVector2D,Out_GazePoint); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_BeginTimeStamp); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_Duration); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetLastFixation(EEyeXFixationDataMode::Type(Mode),Out_GazePoint,Out_BeginTimeStamp,Out_Duration,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGet3DGazePoint) \
	{ \
		P_GET_PROPERTY(UByteProperty,Mode); \
		P_GET_STRUCT_REF(FVector,Out_GazePoint); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::Get3DGazePoint(EEyeXGazePointDataMode::Type(Mode),Out_GazePoint,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetGazePoint) \
	{ \
		P_GET_PROPERTY(UByteProperty,Mode); \
		P_GET_STRUCT_REF(FVector2D,Out_GazePoint); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_Timestamp); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetGazePoint(EEyeXGazePointDataMode::Type(Mode),Out_GazePoint,Out_Timestamp,Out_bHasValue); \
	}


#define UEyeXBlueprintLibrary_RPC_WRAPPERS_NO_PURE_DECLS \
	static inline void StaticChecks_Implementation_Validate() \
	{ \
	} \
 \
 \
	DECLARE_FUNCTION(execSetEmulationMode) \
	{ \
		P_GET_PROPERTY(UByteProperty,Mode); \
		P_FINISH; \
		UEyeXBlueprintLibrary::SetEmulationMode(EEyeXEmulationMode::Type(Mode)); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetEmulationMode) \
	{ \
		P_FINISH; \
		*(TEnumAsByte<EEyeXEmulationMode::Type>*)Result=UEyeXBlueprintLibrary::GetEmulationMode(); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetUserPresence) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Out_UserPresence); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetUserPresence((TEnumAsByte<EEyeXUserPresence::Type>&)(Out_UserPresence)); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetEyeTrackingDeviceStatus) \
	{ \
		P_GET_PROPERTY_REF(UByteProperty,Out_DeviceStatus); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetEyeTrackingDeviceStatus((TEnumAsByte<EEyeXDeviceStatus::Type>&)(Out_DeviceStatus)); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetDisplaySize) \
	{ \
		P_GET_STRUCT_REF(FVector2D,Out_DisplaySize); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetDisplaySize(Out_DisplaySize,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetScreenBounds) \
	{ \
		P_GET_PROPERTY_REF(UIntProperty,Out_X); \
		P_GET_PROPERTY_REF(UIntProperty,Out_Y); \
		P_GET_PROPERTY_REF(UIntProperty,Out_Width); \
		P_GET_PROPERTY_REF(UIntProperty,Out_Height); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetScreenBounds(Out_X,Out_Y,Out_Width,Out_Height,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetHeadRotation) \
	{ \
		P_GET_STRUCT_REF(FRotator,Out_Rotation); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetHeadRotation(Out_Rotation,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetEyePosition) \
	{ \
		P_GET_STRUCT_REF(FVector,Out_LeftEye); \
		P_GET_STRUCT_REF(FVector,Out_RightEye); \
		P_GET_UBOOL_REF(Out_bIsLeftEyeValid); \
		P_GET_UBOOL_REF(Out_bIsRightEyeValid); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_TimeStamp); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetEyePosition(Out_LeftEye,Out_RightEye,Out_bIsLeftEyeValid,Out_bIsRightEyeValid,Out_TimeStamp); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetOngoingFixation) \
	{ \
		P_GET_PROPERTY(UByteProperty,Mode); \
		P_GET_STRUCT_REF(FVector2D,Out_GazePoint); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_BeginTimeStamp); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_Duration); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetOngoingFixation(EEyeXFixationDataMode::Type(Mode),Out_GazePoint,Out_BeginTimeStamp,Out_Duration,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetLastFixation) \
	{ \
		P_GET_PROPERTY(UByteProperty,Mode); \
		P_GET_STRUCT_REF(FVector2D,Out_GazePoint); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_BeginTimeStamp); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_Duration); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetLastFixation(EEyeXFixationDataMode::Type(Mode),Out_GazePoint,Out_BeginTimeStamp,Out_Duration,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGet3DGazePoint) \
	{ \
		P_GET_PROPERTY(UByteProperty,Mode); \
		P_GET_STRUCT_REF(FVector,Out_GazePoint); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::Get3DGazePoint(EEyeXGazePointDataMode::Type(Mode),Out_GazePoint,Out_bHasValue); \
	} \
 \
 \
	DECLARE_FUNCTION(execGetGazePoint) \
	{ \
		P_GET_PROPERTY(UByteProperty,Mode); \
		P_GET_STRUCT_REF(FVector2D,Out_GazePoint); \
		P_GET_PROPERTY_REF(UFloatProperty,Out_Timestamp); \
		P_GET_UBOOL_REF(Out_bHasValue); \
		P_FINISH; \
		UEyeXBlueprintLibrary::GetGazePoint(EEyeXGazePointDataMode::Type(Mode),Out_GazePoint,Out_Timestamp,Out_bHasValue); \
	}


#define UEyeXBlueprintLibrary_CALLBACK_WRAPPERS
#define UEyeXBlueprintLibrary_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUEyeXBlueprintLibrary(); \
	friend TOBIIEYEX_API class UClass* Z_Construct_UClass_UEyeXBlueprintLibrary(); \
	public: \
	DECLARE_CLASS(UEyeXBlueprintLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TobiiEyeX, NO_API) \
	DECLARE_SERIALIZER(UEyeXBlueprintLibrary) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	UObject* _getUObject() const { return const_cast<UEyeXBlueprintLibrary*>(this); }


#define UEyeXBlueprintLibrary_INCLASS \
	private: \
	static void StaticRegisterNativesUEyeXBlueprintLibrary(); \
	friend TOBIIEYEX_API class UClass* Z_Construct_UClass_UEyeXBlueprintLibrary(); \
	public: \
	DECLARE_CLASS(UEyeXBlueprintLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TobiiEyeX, NO_API) \
	DECLARE_SERIALIZER(UEyeXBlueprintLibrary) \
	/** Indicates whether the class is compiled into the engine */    enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	UObject* _getUObject() const { return const_cast<UEyeXBlueprintLibrary*>(this); }


#define UEyeXBlueprintLibrary_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UEyeXBlueprintLibrary(const FObjectInitializer& ObjectInitializer); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UEyeXBlueprintLibrary) \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UEyeXBlueprintLibrary(const UEyeXBlueprintLibrary& InCopy); \
public:


#define UEyeXBlueprintLibrary_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UEyeXBlueprintLibrary(const class FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private copy-constructor, should never be used */ \
	NO_API UEyeXBlueprintLibrary(const UEyeXBlueprintLibrary& InCopy); \
public: \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UEyeXBlueprintLibrary)


#undef UCLASS_CURRENT_FILE_NAME
#define UCLASS_CURRENT_FILE_NAME UEyeXBlueprintLibrary


#undef UCLASS
#undef UINTERFACE
#if UE_BUILD_DOCS
#define UCLASS(...)
#else
#define UCLASS(...) \
UEyeXBlueprintLibrary_EVENTPARMS
#endif


#undef GENERATED_UCLASS_BODY
#undef GENERATED_BODY
#undef GENERATED_IINTERFACE_BODY
#define GENERATED_UCLASS_BODY() \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	UEyeXBlueprintLibrary_RPC_WRAPPERS \
	UEyeXBlueprintLibrary_CALLBACK_WRAPPERS \
	UEyeXBlueprintLibrary_INCLASS \
	UEyeXBlueprintLibrary_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_POP


#define GENERATED_BODY() \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	UEyeXBlueprintLibrary_RPC_WRAPPERS_NO_PURE_DECLS \
	UEyeXBlueprintLibrary_CALLBACK_WRAPPERS \
	UEyeXBlueprintLibrary_INCLASS_NO_PURE_DECLS \
	UEyeXBlueprintLibrary_ENHANCED_CONSTRUCTORS \
static_assert(false, "Unknown access specifier for GENERATED_BODY() macro in class EyeXBlueprintLibrary."); \
PRAGMA_POP


